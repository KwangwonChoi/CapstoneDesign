from __future__ import division
import cv2
import dlib

def detectFaceDlibHog(detector, frame, inHeight=300, inWidth=0):

    frameDlibHog = frame.copy()
    frameHeight = frameDlibHog.shape[0]
    frameWidth = frameDlibHog.shape[1]
    if not inWidth:
        inWidth = int((frameWidth / frameHeight)*inHeight)

    scaleHeight = frameHeight / inHeight
    scaleWidth = frameWidth / inWidth

    frameDlibHogSmall = cv2.resize(frameDlibHog, (inWidth, inHeight))

    frameDlibHogSmall = cv2.cvtColor(frameDlibHogSmall, cv2.COLOR_BGR2RGB)
    faceRects = detector(frameDlibHogSmall, 0)
    print(frameWidth, frameHeight, inWidth, inHeight)
    bboxes = []
    for faceRect in faceRects:

        cvRect = [int(faceRect.left()*scaleWidth), int(faceRect.top()*scaleHeight),
                  int(faceRect.right()*scaleWidth), int(faceRect.bottom()*scaleHeight) ]
        bboxes.append(cvRect)
        cv2.rectangle(frameDlibHog, (cvRect[0], cvRect[1]), (cvRect[2], cvRect[3]), (0, 255, 0), int(round(frameHeight/150)), 4)
    return frameDlibHog, bboxes

if __name__ == "__main__" :
    hogFaceDetector = dlib.get_frontal_face_detector()

    source = "test.mp4"

    cap = cv2.VideoCapture(0)
    hasFrame, frame = cap.read()

    while(1):
        hasFrame, frame = cap.read()
        if not hasFrame:
            break

        #frame = cv2.resize(frame, None, fx=0.1,fy=0.1, interpolation=cv2.INTER_NEAREST)

        outDlibHog, bboxes = detectFaceDlibHog(hogFaceDetector,frame)

        cv2.imshow("Face Detection Comparison", outDlibHog)

        k = cv2.waitKey(10)
        if k == 27:
            break
    cv2.destroyAllWindows()
